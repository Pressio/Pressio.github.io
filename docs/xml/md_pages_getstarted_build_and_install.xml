<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="md_pages_getstarted_build_and_install" kind="page">
    <compoundname>md_pages_getstarted_build_and_install</compoundname>
    <title>Installation and Dependencies</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title>What does this page cover?</title><para>This page describes the dependencies of <computeroutput>pressio</computeroutput> and its installation process. By the end, you should be able to get pressio, install it, and point to the installed headers from your application. </para>
</simplesect>
</para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title>Overview</title><para><computeroutput>pressio</computeroutput> is header-only, so to use it one does not need to precompile it into a library and linking to it. However, since we use preprocessor directives to conditionally enable/disable code based on target third-party libraries, one needs to account for this. See below for the details. </para>
</simplesect>
</para>
<sect1 id="md_pages_getstarted_build_and_install_1autotoc_md14">
<title>Dependencies</title>
<para><computeroutput>pressio</computeroutput> contains code that is specific to third-party libraries (TPLs) to benefit the integration into existing applications. We can distinguish between <emphasis>optional</emphasis> and <emphasis>required</emphasis> dependencies.</para>
<para><table rows="8" cols="2"><row>
<entry thead="yes"><para>TPL Library Name </para>
</entry><entry thead="yes"><para>Optional/Required  </para>
</entry></row>
<row>
<entry thead="no"><para>Eigen </para>
</entry><entry thead="no"><para>Required  </para>
</entry></row>
<row>
<entry thead="no"><para>Trilinos </para>
</entry><entry thead="no"><para>Optional  </para>
</entry></row>
<row>
<entry thead="no"><para>MPI </para>
</entry><entry thead="no"><para>Optional  </para>
</entry></row>
<row>
<entry thead="no"><para>Kokkos </para>
</entry><entry thead="no"><para>Optional  </para>
</entry></row>
<row>
<entry thead="no"><para>BLAS </para>
</entry><entry thead="no"><para>Optional  </para>
</entry></row>
<row>
<entry thead="no"><para>LAPACK </para>
</entry><entry thead="no"><para>Optional  </para>
</entry></row>
<row>
<entry thead="no"><para>Pybind11 </para>
</entry><entry thead="no"><para>Optional  </para>
</entry></row>
</table>
</para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-default" /></para>
<para><simplesect kind="par"><title></title><para>Eigen is the only required dependency because it is the default choice for instantiating the (dense) ROM operators and solving the (dense) ROM problem. </para>
</simplesect>
</para>
<para>Enabling/disabling specific dependencies is done via the following cmake variables:  <mcss:span xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-text m-danger">todo</mcss:span> fix the autoamtic setting of pressio based on what is selected.</para>
<para><table rows="10" cols="3"><row>
<entry thead="yes"><para>Variable </para>
</entry><entry thead="yes"><para>Description </para>
</entry><entry thead="yes"><para>Default Value  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>PRESSIO_ENABLE_TPL_EIGEN</computeroutput> </para>
</entry><entry thead="no"><para>self-explanatory </para>
</entry><entry thead="no"><para><computeroutput>ON</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>PRESSIO_ENABLE_TPL_TRILINOS</computeroutput> </para>
</entry><entry thead="no"><para>self-explanatory </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>PRESSIO_ENABLE_TPL_MPI</computeroutput> </para>
</entry><entry thead="no"><para>self-explanatory </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> automatically <computeroutput>ON</computeroutput> if <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS=ON</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>PRESSIO_ENABLE_TPL_KOKKOS</computeroutput> </para>
</entry><entry thead="no"><para>self-explanatory </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput>; automatically <computeroutput>ON</computeroutput> if <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS=ON</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>PRESSIO_ENABLE_TEUCHOS_TIMERS</computeroutput> </para>
</entry><entry thead="no"><para>self-explanatory </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput> automatically <computeroutput>ON</computeroutput> if <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS=ON</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>PRESSIO_ENABLE_TPL_BLAS</computeroutput> </para>
</entry><entry thead="no"><para>self-explanatory </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput>; automatically <computeroutput>ON</computeroutput> if <computeroutput>PRESSIO_ENABLE_TPL_LAPACK=ON</computeroutput> or <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS=ON</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>PRESSIO_ENABLE_TPL_LAPACK</computeroutput> </para>
</entry><entry thead="no"><para>self-explanatory </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput>; automatically <computeroutput>ON</computeroutput> if <computeroutput>PRESSIO_ENABLE_TPL_BLAS=ON</computeroutput> or <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS=ON</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>PRESSIO_ENABLE_TPL_PYBIND11</computeroutput> </para>
</entry><entry thead="no"><para>self-explanatory </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput>  </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>PRESSIO_ENABLE_DEBUG_PRINT</computeroutput> </para>
</entry><entry thead="no"><para>to enable debugging print statements </para>
</entry><entry thead="no"><para><computeroutput>OFF</computeroutput>  </para>
</entry></row>
</table>
</para>
<para>Obviously, the choice of TPLs to enable is related to the dependency requirements of your application. For example, if you have an application that relies on Trilinos data structures and want to use <computeroutput>pressio</computeroutput>, then it makes sense to enable the Trilinos dependency. If you have an application that relies on Eigen data structures, then it makes sense to only leave only Eigen on.</para>
<para>Also, some of the cmake variables listed above are connected. For example, if we enable Trilinos then <computeroutput>pressio</computeroutput> automatically enables also Kokkos, BLAS, LAPACK and MPI. The reason for this is twofold: (a) to simplify what the user needs to provide; and (b) we belive some of these constraints are necessary.</para>
</sect1>
<sect1 id="md_pages_getstarted_build_and_install_1autotoc_md15">
<title>In practice, what are the steps to get, install and use Pressio?</title>
<para>We suggest to use the following steps to install the <computeroutput>pressio</computeroutput> headers such that you can then point to it from within your code: <orderedlist>
<listitem>
<para></para>
<para>Clone <computeroutput>pressio</computeroutput></para>
<para></para>
<para></para>
</listitem>
<listitem>
<para></para>
<para>Create a build and install subdirectories</para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-code-figure" /> <parblock><para><programlisting filename=".bash"><codeline><highlight class="normal">cd<sp/>&lt;where-you-cloned-pressio&gt;</highlight></codeline>
<codeline><highlight class="normal">mkdir<sp/>build<sp/>&amp;&amp;<sp/>mkdir<sp/>install</highlight></codeline>
</programlisting> </para>
<para></para>
<para><linebreak/>
 </para>
</parblock></para>
</listitem>
<listitem>
<para></para>
<para>Use cmake to configure by passing to the comand line the target list of cmake variables to define. For example, if we want to enable support in <computeroutput>pressio</computeroutput> for Trilinos, one would do:</para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-code-figure" /> <parblock><para><programlisting filename=".bash"><codeline><highlight class="normal">cd<sp/>&lt;where-you-cloned-pressio&gt;/build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-D<sp/>CMAKE_INSTALL_PREFIX=../install<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-D<sp/>PRESSIO_ENABLE_TPL_TRILINOS=ON<sp/>..</highlight></codeline>
<codeline><highlight class="normal">make<sp/>install<sp/>#<sp/>nothing<sp/>is<sp/>built,<sp/>just<sp/>headers<sp/>copied<sp/>to<sp/>installation</highlight></codeline>
</programlisting> </para>
<para>Note that during this step <bold>nothing</bold> is built because <computeroutput>pressio</computeroutput> is header-only. This step only processes the cmake arguments and copy the headers to the install prefix <computeroutput>&lt;where-you-cloned-pressio&gt;/install</computeroutput>, where you can also find a <computeroutput>presssio_cmake_config.h</computeroutput> file containing the cmake variables defined.</para>
<para>Since <computeroutput>pressio</computeroutput> is header-only, any TPL you want to enable is <bold>not</bold> really needed during this installation of <computeroutput>pressio</computeroutput>, but obviously will be needed when you build any code that <emphasis>uses</emphasis> pressio and that TPL.</para>
<para><linebreak/>
 </para>
</parblock></para>
</listitem>
<listitem>
<para></para>
<para>Now you point to the installed headers when building your application, and include the <computeroutput>pressio</computeroutput> header <computeroutput>pressio.hpp</computeroutput>, for example as:  <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-code-figure" /> <parblock><para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;pressio.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>what<sp/>you<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
<para></para>
</parblock></para>
</listitem>
</orderedlist>
</para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-warning" /></para>
<para><simplesect kind="par"><title>Warning:</title><para>The procedue above is highly advised because it enables <computeroutput>pressio</computeroutput> to properly process the cmake options and turn on/off based on certain conditions (as explained above). The alternative way to use pressio would be to just clone the repo, point to its source code and use cmake variables directly when building your code. However, this could have unexpected consequences since you would be resposible to set the variables correctly but you would not know exactly all the possible constrants. Therefore, we suggest to use the steps above. </para>
</simplesect>
</para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
